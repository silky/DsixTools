(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



Print[StyleForm["EWmatcher","Section",FontSize->22,Bold]];
Print[StyleForm["DsixTools module for the matching at the electroweak scale",FontSize->16]];
EWmatcherDir=DsixToolsDir<>"EWmatcher/";
EWmatcher=True;
InitializeEWmatcherInput;


(* Function to apply biunitary transformation *)
Biunitary[mat_,dim_]:=Block[{mat2L,mat2R,eigen,RotL,RotR,RotLPre,RotRPre,copy,MatrixPhase,phase},

mat2L=mat.H[mat];
mat2R=H[mat].mat;

eigen=Sqrt[Eigenvalues[mat2L]];

RotLPre=Eigenvectors[mat2L];
RotRPre=Eigenvectors[mat2R];

(* Reorder eigenvectors *)
copy=RotLPre;
Do[RotLPre[[i,All]]=copy[[dim+1-i,All]];,{i,1,dim}];

copy=RotRPre;
Do[RotRPre[[i,All]]=copy[[dim+1-i,All]];,{i,1,dim}];

(* Absorbe phases in R eigenvectors *)
MatrixPhase=CC[RotLPre].mat.Transpose[RotRPre];
Do[
phase=MatrixPhase[[i,i]]/Abs[MatrixPhase[[i,i]]];
RotRPre[[i,All]]=CC[phase] RotRPre[[i,All]];
,{i,1,dim}];

(* Transpose *)
RotL=Transpose[RotLPre];
RotR=Transpose[RotRPre];

Return[{eigen,RotL,RotR}];
];


(* Rotate SMEFT to mass basis *)
RotateToMassBasis:=Block[{},

MyPrint["Rotating SMEFT WCs to mass basis"];
Get[EWmatcherDir<>"lowBasis.m"];

];


(* Matching to effective operators commonly used in phenomenology *)
ApplyEWmatching:=Block[{},

MyPrint["Matching to low energy operators"];
Get[EWmatcherDir<>"lowMatching.m"];

];


EWmatch={CBS2[1]->MatchCBS2[1],CBS2[2]->MatchCBS2[2],CBS2[3]->MatchCBS2[3],CBS2[4]->MatchCBS2[4],CBS2[5]->MatchCBS2[5],CBS2p[1]->MatchCBS2p[1],CBS2p[2]->MatchCBS2p[2],CBS2p[3]->MatchCBS2p[3],
CBC1[e][1]->MatchCBC1[e][1],CBC1[e][5]->MatchCBC1[e][5],CBC1p[e][1]->MatchCBC1p[e][1],CBC1p[e][5]->MatchCBC1p[e][5],CBC1p[e][7]->MatchCBC1p[e][7],
CBC1[\[Mu]][1]->MatchCBC1[\[Mu]][1],CBC1[\[Mu]][5]->MatchCBC1[\[Mu]][5],CBC1p[\[Mu]][1]->MatchCBC1p[\[Mu]][1],CBC1p[\[Mu]][5]->MatchCBC1p[\[Mu]][5],CBC1p[\[Mu]][7]->MatchCBC1p[\[Mu]][7],
CBC1[\[Tau]][1]->MatchCBC1[\[Tau]][1],CBC1[\[Tau]][5]->MatchCBC1[\[Tau]][5],CBC1p[\[Tau]][1]->MatchCBC1p[\[Tau]][1],CBC1p[\[Tau]][5]->MatchCBC1p[\[Tau]][5],CBC1p[\[Tau]][7]->MatchCBC1p[\[Tau]][7],
CBS1[u][1]->MatchCBS1[u][1],CBS1[u][2]->MatchCBS1[u][2],CBS1[u][3]->MatchCBS1[u][3],CBS1[u][4]->MatchCBS1[u][4],CBS1[u][5]->MatchCBS1[u][5],CBS1[u][6]->MatchCBS1[u][6],CBS1[u][7]->MatchCBS1[u][7],CBS1[u][8]->MatchCBS1[u][8],CBS1[u][9]->MatchCBS1[u][9],CBS1[u][10]->MatchCBS1[u][10],CBS1[d][1]->MatchCBS1[d][1],CBS1[d][2]->MatchCBS1[d][2],CBS1[d][3]->MatchCBS1[d][3],CBS1[d][4]->MatchCBS1[d][4],CBS1[d][5]->MatchCBS1[d][5],CBS1[d][6]->MatchCBS1[d][6],CBS1[d][7]->MatchCBS1[d][7],CBS1[d][8]->MatchCBS1[d][8],CBS1[d][9]->MatchCBS1[d][9],CBS1[d][10]->MatchCBS1[d][10],CBS1[c][1]->MatchCBS1[c][1],CBS1[c][2]->MatchCBS1[c][2],CBS1[c][3]->MatchCBS1[c][3],CBS1[c][4]->MatchCBS1[c][4],CBS1[c][5]->MatchCBS1[c][5],CBS1[c][6]->MatchCBS1[c][6],CBS1[c][7]->MatchCBS1[c][7],CBS1[c][8]->MatchCBS1[c][8],CBS1[c][9]->MatchCBS1[c][9],CBS1[c][10]->MatchCBS1[c][10],CBS1[s][1]->MatchCBS1[s][1],CBS1[s][3]->MatchCBS1[s][3],CBS1[s][5]->MatchCBS1[s][5],CBS1[s][7]->MatchCBS1[s][7],CBS1[s][9]->MatchCBS1[s][9],CBS1[b][1]->MatchCBS1[b][1],CBS1[b][3]->MatchCBS1[b][3],CBS1[b][5]->MatchCBS1[b][5],CBS1[b][7]->MatchCBS1[b][7],CBS1[b][9]->MatchCBS1[b][9],CBS1[M][7]->MatchCBS1[M][7],CBS1[M][8]->MatchCBS1[M][8],CBS1[e][1]->MatchCBS1[e][1],CBS1[e][3]->MatchCBS1[e][3],CBS1[e][5]->MatchCBS1[e][5],CBS1[e][7]->MatchCBS1[e][7],CBS1[e][9]->MatchCBS1[e][9],CBS1[\[Mu]][1]->MatchCBS1[\[Mu]][1],CBS1[\[Mu]][3]->MatchCBS1[\[Mu]][3],CBS1[\[Mu]][5]->MatchCBS1[\[Mu]][5],CBS1[\[Mu]][7]->MatchCBS1[\[Mu]][7],CBS1[\[Mu]][9]->MatchCBS1[\[Mu]][9],CBS1[\[Tau]][1]->MatchCBS1[\[Tau]][1],CBS1[\[Tau]][3]->MatchCBS1[\[Tau]][3],CBS1[\[Tau]][5]->MatchCBS1[\[Tau]][5],CBS1[\[Tau]][7]->MatchCBS1[\[Tau]][7],CBS1[\[Tau]][9]->MatchCBS1[\[Tau]][9],CBS1p[u][1]->MatchCBS1p[u][1],CBS1p[u][2]->MatchCBS1p[u][2],CBS1p[u][3]->MatchCBS1p[u][3],CBS1p[u][4]->MatchCBS1p[u][4],CBS1p[u][5]->MatchCBS1p[u][5],CBS1p[u][6]->MatchCBS1p[u][6],CBS1p[u][7]->MatchCBS1p[u][7],CBS1p[u][8]->MatchCBS1p[u][8],CBS1p[u][9]->MatchCBS1p[u][9],CBS1p[u][10]->MatchCBS1p[u][10],CBS1p[d][1]->MatchCBS1p[d][1],CBS1p[d][2]->MatchCBS1p[d][2],CBS1p[d][3]->MatchCBS1p[d][3],CBS1p[d][4]->MatchCBS1p[d][4],CBS1p[d][5]->MatchCBS1p[d][5],CBS1p[d][6]->MatchCBS1p[d][6],CBS1p[d][7]->MatchCBS1p[d][7],CBS1p[d][8]->MatchCBS1p[d][8],CBS1p[d][9]->MatchCBS1p[d][9],CBS1p[d][10]->MatchCBS1p[d][10],CBS1p[c][1]->MatchCBS1p[c][1],CBS1p[c][2]->MatchCBS1p[c][2],CBS1p[c][3]->MatchCBS1p[c][3],CBS1p[c][4]->MatchCBS1p[c][4],CBS1p[c][5]->MatchCBS1p[c][5],CBS1p[c][6]->MatchCBS1p[c][6],CBS1p[c][7]->MatchCBS1p[c][7],CBS1p[c][8]->MatchCBS1p[c][8],CBS1p[c][9]->MatchCBS1p[c][9],CBS1p[c][10]->MatchCBS1p[c][10],CBS1p[s][1]->MatchCBS1p[s][1],CBS1p[s][3]->MatchCBS1p[s][3],CBS1p[s][5]->MatchCBS1p[s][5],CBS1p[s][7]->MatchCBS1p[s][7],CBS1p[s][9]->MatchCBS1p[s][9],CBS1p[b][1]->MatchCBS1p[b][1],CBS1p[b][3]->MatchCBS1p[b][3],CBS1p[b][5]->MatchCBS1p[b][5],CBS1p[b][7]->MatchCBS1p[b][7],CBS1p[b][9]->MatchCBS1p[b][9],CBS1p[M][7]->MatchCBS1p[M][7],CBS1p[M][8]->MatchCBS1p[M][8],CBS1p[e][1]->MatchCBS1p[e][1],CBS1p[e][3]->MatchCBS1p[e][3],CBS1p[e][5]->MatchCBS1p[e][5],CBS1p[e][7]->MatchCBS1p[e][7],CBS1p[e][9]->MatchCBS1p[e][9],CBS1p[\[Mu]][1]->MatchCBS1p[\[Mu]][1],CBS1p[\[Mu]][3]->MatchCBS1p[\[Mu]][3],CBS1p[\[Mu]][5]->MatchCBS1p[\[Mu]][5],CBS1p[\[Mu]][7]->MatchCBS1p[\[Mu]][7],CBS1p[\[Mu]][9]->MatchCBS1p[\[Mu]][9],CBS1p[\[Tau]][1]->MatchCBS1p[\[Tau]][1],CBS1p[\[Tau]][3]->MatchCBS1p[\[Tau]][3],CBS1p[\[Tau]][5]->MatchCBS1p[\[Tau]][5],CBS1p[\[Tau]][7]->MatchCBS1p[\[Tau]][7],CBS1p[\[Tau]][9]->MatchCBS1p[\[Tau]][9]};


MatchAnalytical[x_]:=x/.EWmatch;
Match[x_]:=x/.EWmatch/.ToMassBasis;


ExportEWmatcher:=Block[{},

If[exportEWmatcher==1,
MyPrint["Exporting EWmatcher results"];
dataOutput=Chop[Join[BS2,BC1,BS1Hunprimed,BS1GB[[1;;2]],BS1SLunprimed,BS1Hprimed,BS1GB[[3;;4]],BS1SLprimed],$MachineEpsilon];
outname="Output_EWmatcher.dat";
WriteEWmatcherOutputFile[outname,dataOutput];
];

];
