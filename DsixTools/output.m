(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* Format for output real numbers *)
outR[x_]:=NumberForm[x,{7,6},NumberPadding->{"","0"},NumberFormat->(If[#3==="",#1,Row[{#1,"E",#3}]]&)];


(* Independent WCs *)
indices2F1={{1,1},{1,2},{1,3},{2,1},{2,2},{2,3},{3,1},{3,2},{3,3}};
indices2F2Re={{1,1},{1,2},{1,3},{2,2},{2,3},{3,3}};
indices2F2Im={{1,2},{1,3},{2,3}};
indices2F3={{1,1},{1,2},{1,3},{2,2},{2,3},{3,3}};
indices4F3={{1,1,1,1},{1,1,1,2},{1,1,1,3},{1,1,2,1},{1,1,2,2},{1,1,2,3},{1,1,3,1},{1,1,3,2},{1,1,3,3},{1,2,1,1},{1,2,1,2},{1,2,1,3},{1,2,2,1},{1,2,2,2},{1,2,2,3},{1,2,3,1},{1,2,3,2},{1,2,3,3},{1,3,1,1},{1,3,1,2},{1,3,1,3},{1,3,2,1},{1,3,2,2},{1,3,2,3},{1,3,3,1},{1,3,3,2},{1,3,3,3},{2,1,1,1},{2,1,1,2},{2,1,1,3},{2,1,2,1},{2,1,2,2},{2,1,2,3},{2,1,3,1},{2,1,3,2},{2,1,3,3},{2,2,1,1},{2,2,1,2},{2,2,1,3},{2,2,2,1},{2,2,2,2},{2,2,2,3},{2,2,3,1},{2,2,3,2},{2,2,3,3},{2,3,1,1},{2,3,1,2},{2,3,1,3},{2,3,2,1},{2,3,2,2},{2,3,2,3},{2,3,3,1},{2,3,3,2},{2,3,3,3},{3,1,1,1},{3,1,1,2},{3,1,1,3},{3,1,2,1},{3,1,2,2},{3,1,2,3},{3,1,3,1},{3,1,3,2},{3,1,3,3},{3,2,1,1},{3,2,1,2},{3,2,1,3},{3,2,2,1},{3,2,2,2},{3,2,2,3},{3,2,3,1},{3,2,3,2},{3,2,3,3},{3,3,1,1},{3,3,1,2},{3,3,1,3},{3,3,2,1},{3,3,2,2},{3,3,2,3},{3,3,3,1},{3,3,3,2},{3,3,3,3}};
indices4F4Re={{1,1,1,1},{1,1,1,2},{1,1,1,3},{1,1,2,2},{1,1,2,3},{1,1,3,3},{1,2,1,2},{1,2,1,3},{1,2,2,1},{1,2,2,2},{1,2,2,3},{1,2,3,1},{1,2,3,2},{1,2,3,3},{1,3,1,3},{1,3,2,2},{1,3,2,3},{1,3,3,1},{1,3,3,2},{1,3,3,3},{2,2,2,2},{2,2,2,3},{2,2,3,3},{2,3,2,3},{2,3,3,2},{2,3,3,3},{3,3,3,3}};
indices4F4Im={{1,1,1,2},{1,1,1,3},{1,1,2,3},{1,2,1,2},{1,2,1,3},{1,2,2,2},{1,2,2,3},{1,2,3,1},{1,2,3,2},{1,2,3,3},{1,3,1,3},{1,3,2,2},{1,3,2,3},{1,3,3,2},{1,3,3,3},{2,2,2,3},{2,3,2,3},{2,3,3,3}};
indices4F5Re={{1,1,1,1},{1,1,1,2},{1,1,1,3},{1,1,2,2},{1,1,2,3},{1,1,3,3},{1,2,1,1},{1,2,1,2},{1,2,1,3},{1,2,2,1},{1,2,2,2},{1,2,2,3},{1,2,3,1},{1,2,3,2},{1,2,3,3},{1,3,1,1},{1,3,1,2},{1,3,1,3},{1,3,2,1},{1,3,2,2},{1,3,2,3},{1,3,3,1},{1,3,3,2},{1,3,3,3},{2,2,1,1},{2,2,1,2},{2,2,1,3},{2,2,2,2},{2,2,2,3},{2,2,3,3},{2,3,1,1},{2,3,1,2},{2,3,1,3},{2,3,2,1},{2,3,2,2},{2,3,2,3},{2,3,3,1},{2,3,3,2},{2,3,3,3},{3,3,1,1},{3,3,1,2},{3,3,1,3},{3,3,2,2},{3,3,2,3},{3,3,3,3}};
indices4F5Im={{1,1,1,2},{1,1,1,3},{1,1,2,3},{1,2,1,1},{1,2,1,2},{1,2,1,3},{1,2,2,1},{1,2,2,2},{1,2,2,3},{1,2,3,1},{1,2,3,2},{1,2,3,3},{1,3,1,1},{1,3,1,2},{1,3,1,3},{1,3,2,1},{1,3,2,2},{1,3,2,3},{1,3,3,1},{1,3,3,2},{1,3,3,3},{2,2,1,2},{2,2,1,3},{2,2,2,3},{2,3,1,1},{2,3,1,2},{2,3,1,3},{2,3,2,1},{2,3,2,2},{2,3,2,3},{2,3,3,1},{2,3,3,2},{2,3,3,3},{3,3,1,2},{3,3,1,3},{3,3,2,3}};
indices4F6Re={{1,1,1,1},{1,1,1,2},{1,1,1,3},{1,1,2,2},{1,1,2,3},{1,1,3,3},{1,2,1,2},{1,2,1,3},{1,2,2,2},{1,2,2,3},{1,2,3,2},{1,2,3,3},{1,3,1,3},{1,3,2,3},{1,3,3,3},{2,2,2,2},{2,2,2,3},{2,2,3,3},{2,3,2,3},{2,3,3,3},{3,3,3,3}};
indices4F6Im={{1,1,1,2},{1,1,1,3},{1,1,2,3},{1,2,1,2},{1,2,1,3},{1,2,2,2},{1,2,2,3},{1,2,3,2},{1,2,3,3},{1,3,1,3},{1,3,2,3},{1,3,3,3},{2,2,2,3},{2,3,2,3},{2,3,3,3}};
indices4F7={{1,1,1,1},{1,1,1,2},{1,1,1,3},{1,1,2,1},{1,1,2,2},{1,1,2,3},{1,1,3,1},{1,1,3,2},{1,1,3,3},{1,2,1,1},{1,2,1,2},{1,2,1,3},{1,2,2,1},{1,2,2,2},{1,2,2,3},{1,2,3,1},{1,2,3,2},{1,2,3,3},{1,3,1,1},{1,3,1,2},{1,3,1,3},{1,3,2,1},{1,3,2,2},{1,3,2,3},{1,3,3,1},{1,3,3,2},{1,3,3,3},{2,2,1,1},{2,2,1,2},{2,2,1,3},{2,2,2,1},{2,2,2,2},{2,2,2,3},{2,2,3,1},{2,2,3,2},{2,2,3,3},{2,3,1,1},{2,3,1,2},{2,3,1,3},{2,3,2,1},{2,3,2,2},{2,3,2,3},{2,3,3,1},{2,3,3,2},{2,3,3,3},{3,3,1,1},{3,3,1,2},{3,3,1,3},{3,3,2,1},{3,3,2,2},{3,3,2,3},{3,3,3,1},{3,3,3,2},{3,3,3,3}};
indices4F8={{1,1,1,1},{1,1,1,2},{1,1,1,3},{1,1,2,1},{1,1,2,2},{1,1,2,3},{1,1,3,1},{1,1,3,2},{1,1,3,3},{1,2,1,1},{1,2,1,2},{1,2,1,3},{1,2,2,1},{1,2,2,2},{1,2,2,3},{1,2,3,1},{1,2,3,2},{1,2,3,3},{1,3,1,1},{1,3,1,2},{1,3,1,3},{1,3,2,1},{1,3,2,2},{1,3,2,3},{1,3,3,1},{1,3,3,2},{1,3,3,3},{2,1,2,1},{2,1,2,2},{2,1,2,3},{2,1,3,1},{2,1,3,2},{2,1,3,3},{2,2,2,1},{2,2,2,2},{2,2,2,3},{2,2,3,1},{2,2,3,2},{2,2,3,3},{2,3,1,1},{2,3,1,2},{2,3,1,3},{2,3,2,1},{2,3,2,2},{2,3,2,3},{2,3,3,1},{2,3,3,2},{2,3,3,3},{3,1,3,1},{3,1,3,2},{3,1,3,3},{3,2,3,1},{3,2,3,2},{3,2,3,3},{3,3,3,1},{3,3,3,2},{3,3,3,3}};


WriteScales:=Block[{},
Write[outfile,"Block SCALES"];
Write[outfile,1," ",HIGHSCALE,"\t","# UV scale [GeV]"];
Write[outfile,2," ",LOWSCALE,"\t","# EW scale [GeV]"];
];


WriteScalesLow[scale_]:=Block[{},
Write[outfile,"Block SCALES"];
Write[outfile,2," ",LOWSCALE,"\t","# EW scale [GeV]"];
Write[outfile,3," ",scale,"\t","# IR scale [GeV]"];
];


WriteGauge:=Block[{},
Write[outfile,"Block GAUGE"];
Write[outfile,1," ",outR[dataOutput[[1]]],"\t","# g"];
Write[outfile,2," ",outR[dataOutput[[2]]],"\t","# gp"];
Write[outfile,3," ",outR[dataOutput[[3]]],"\t","# gs"];
];


WriteScalar:=Block[{},
Write[outfile,"Block SCALAR"];
Write[outfile,1," ",outR[dataOutput[[4]]],"\t","# lambda"];
Write[outfile,2," ",outR[dataOutput[[5]]],"\t","# m2 [GeV^2]"];
];


WriteYukawa[nameblock_,name_,n_,ReIm_]:=Block[{},

Write[outfile,"Block "<>nameblock];

indices=indices2F1;
Do[
i=indices[[k,1]];
j=indices[[k,2]];
If[ReIm==0,
Write[outfile,i," ",j," ",outR[Re[dataOutput[[n-1+k]]]],"\t","# "<>name<>"("<>ToString[i]<>","<>ToString[j]<>")"];
];
If[ReIm==1&&IntersectingQ[{{i,j}},indices],
Write[outfile,i," ",j," ",outR[Im[dataOutput[[n-1+k]]]],"\t","# "<>name<>"("<>ToString[i]<>","<>ToString[j]<>")"];
];
,{k,1,Length[indices]}];
];

WriteTheta:=Block[{},
Write[outfile,"Block THETA"];
Write[outfile,1," ",outR[dataOutput[[33]]],"\t","# theta"];
Write[outfile,2," ",outR[dataOutput[[34]]],"\t","# thetap"];
Write[outfile,3," ",outR[dataOutput[[35]]],"\t","# thetas"];
];

WriteSM:=Block[{},

WriteGauge;
WriteScalar;
WriteYukawa["GU","Gamma_u",6,0]; 
If[CPV==1,WriteYukawa["IMGU","Gamma_u",6,1];];
WriteYukawa["GD","Gamma_d",15,0]; 
If[CPV==1,WriteYukawa["IMGD","Gamma_d",15,1];];
WriteYukawa["GE","Gamma_e",24,0]; 
If[CPV==1,WriteYukawa["IMGE","Gamma_e",24,1];];
WriteTheta;

];


WriteWC1:=Block[{},
Write[outfile,"Block WC1"];
Write[outfile,1," ",outR[Re[dataOutput[[36]]]],"\t","# G"];
Write[outfile,2," ",outR[Re[dataOutput[[37]]]],"\t","# G tilde"];
Write[outfile,3," ",outR[Re[dataOutput[[38]]]],"\t","# W"];
Write[outfile,4," ",outR[Re[dataOutput[[39]]]],"\t","# W tilde"];
];


WriteWC2:=Block[{},
Write[outfile,"Block WC2"];
Write[outfile,1," ",outR[Re[dataOutput[[40]]]],"\t","# phi"];
];


WriteWC3:=Block[{},
Write[outfile,"Block WC3"];
Write[outfile,1," ",outR[Re[dataOutput[[41]]]],"\t","# phiBox"];
Write[outfile,2," ",outR[Re[dataOutput[[42]]]],"\t","# phiD"];
];


WriteWC4:=Block[{},
Write[outfile,"Block WC4"];
Write[outfile,1," ",outR[Re[dataOutput[[43]]]],"\t","# phiG"];
Write[outfile,2," ",outR[Re[dataOutput[[44]]]],"\t","# phiB"];
Write[outfile,3," ",outR[Re[dataOutput[[45]]]],"\t","# phiW"];
Write[outfile,4," ",outR[Re[dataOutput[[46]]]],"\t","# phiWB"];
Write[outfile,5," ",outR[Re[dataOutput[[47]]]],"\t","# phiGtilde"];
Write[outfile,6," ",outR[Re[dataOutput[[48]]]],"\t","# phiBtilde"];
Write[outfile,7," ",outR[Re[dataOutput[[49]]]],"\t","# phiWtilde"];
Write[outfile,8," ",outR[Re[dataOutput[[50]]]],"\t","# phiWtildeB"];
];


Write0F:=Block[{},
WriteWC1;
WriteWC2;
WriteWC3;
WriteWC4;
];


WriteWC2F[nameblock_,name_,n_,cat_,ReIm_]:=Block[{},

Write[outfile,"Block "<>nameblock];
If[cat==1,indices=indices2F1;];  (* general 3x3 matrix *)
If[cat==2&&ReIm==0,indices=indices2F2Re;]; (* hermitian 3x3 matrix - Real part *)
If[cat==2&&ReIm==1,indices=indices2F2Im;]; (* hermitian 3x3 matrix - Imaginary part *)
If[cat==3,indices=indices2F3;];  (* symmetric 3x3 matrix *)
Do[
i=indices[[k,1]];
j=indices[[k,2]];
If[ReIm==0,
Write[outfile,i," ",j," ",outR[Re[dataOutput[[n-1+k]]]],"\t","# "<>name<>"("<>ToString[i]<>","<>ToString[j]<>")"];
];
If[ReIm==1&&IntersectingQ[{{i,j}},indices],
Write[outfile,i," ",j," ",outR[Im[dataOutput[[n-1+k]]]],"\t","# "<>name<>"("<>ToString[i]<>","<>ToString[j]<>")"];
];
,{k,1,Length[indices]}];
];


Write2F:=Block[{},

(* \[Psi]^2\[CurlyPhi]^3 *)
WriteWC2F["WCUPHI","uphi",51,1,0]; 
If[CPV==1,WriteWC2F["IMWCUPHI","uphi",51,1,1];];
WriteWC2F["WCDPHI","dphi",60,1,0];
If[CPV==1,WriteWC2F["IMWCDPHI","dphi",60,1,1];];
WriteWC2F["WCEPHI","ephi",69,1,0];
If[CPV==1,WriteWC2F["IMWCEPHI","ephi",69,1,1];];

(* \[Psi]^2X \[CurlyPhi] *)
WriteWC2F["WCEW","eW",78,1,0]; 
If[CPV==1,WriteWC2F["IMWCEW","eW",78,1,1];];
WriteWC2F["WCEB","eB",87,1,0]; 
If[CPV==1,WriteWC2F["IMWCEB","eB",87,1,1];];
WriteWC2F["WCUG","uG",96,1,0]; 
If[CPV==1,WriteWC2F["IMWCUG","uG",96,1,1];];
WriteWC2F["WCUW","uW",105,1,0]; 
If[CPV==1,WriteWC2F["IMWCUW","uW",105,1,1];];
WriteWC2F["WCUB","uB",114,1,0]; 
If[CPV==1,WriteWC2F["IMWCUB","uB",114,1,1];];
WriteWC2F["WCDG","dG",123,1,0]; 
If[CPV==1,WriteWC2F["IMWCDG","dG",123,1,1];];
WriteWC2F["WCDW","dW",132,1,0]; 
If[CPV==1,WriteWC2F["IMWCDW","dW",132,1,1];];
WriteWC2F["WCDB","dB",141,1,0]; 
If[CPV==1,WriteWC2F["IMWCDB","dB",141,1,1];];

(* \[Psi]^2\[CurlyPhi]^2D *)
WriteWC2F["WCPHIL1","phil1",150,2,0]; 
If[CPV==1,WriteWC2F["IMWCPHIL1","phil1",150,2,1];];
WriteWC2F["WCPHIL3","phil3",156,2,0]; 
If[CPV==1,WriteWC2F["IMWCPHIL3","phil3",156,2,1];];
WriteWC2F["WCPHIE","phie",162,2,0]; 
If[CPV==1,WriteWC2F["IMWCPHIE","phie",162,2,1];];
WriteWC2F["WCPHIQ1","phiq1",168,2,0]; 
If[CPV==1,WriteWC2F["IMWCPHIQ1","phiq1",168,2,1];];
WriteWC2F["WCPHIQ3","phiq3",174,2,0]; 
If[CPV==1,WriteWC2F["IMWCPHIQ3","phiq3",174,2,1];];
WriteWC2F["WCPHIU","phiu",180,2,0]; 
If[CPV==1,WriteWC2F["IMWCPHIU","phiu",180,2,1];];
WriteWC2F["WCPHID","phid",186,2,0]; 
If[CPV==1,WriteWC2F["IMWCPHID","phid",186,2,1];];
WriteWC2F["WCPHIUD","phiud",192,1,0]; 
If[CPV==1,WriteWC2F["IMWCPHIUD","phiud",192,1,1];];

];


WriteWC4F[nameblock_,name_,n_,cat_,ReIm_]:=Block[{},

Write[outfile,"Block "<>nameblock];
If[cat==3,indices=indices4F3;]; (* general 3x3x3x3 object *)
If[cat==4&&ReIm==0,indices=indices4F4Re;]; (* two identical XX currents (class 8 A-B) - Real part *)
If[cat==4&&ReIm==1,indices=indices4F4Im;]; (* two identical XX currents (class 8 A-B) - Imaginary part *)
If[cat==5&&ReIm==0,indices=indices4F5Re;]; (* two independent XX currents (class 8 C-D) - Real part *)
If[cat==5&&ReIm==1,indices=indices4F5Im;]; (* two independent XX currents (class 8 C-D) - Imaginary part *)
If[cat==6&&ReIm==0,indices=indices4F6Re;]; (* two identical XX currents special case Cee (class 8 E-F) - Real part *)
If[cat==6&&ReIm==1,indices=indices4F6Im;]; (* two identical XX currents special case Cee (class 8 E-F) - Imaginary part *)
If[cat==7,indices=indices4F7;]; (* B-violating special case qque *)
If[cat==8,indices=indices4F8;]; (* B-violating special case qqql *)

Do[
p=indices[[k,1]];
r=indices[[k,2]];
s=indices[[k,3]];
m=indices[[k,4]];
If[ReIm==0,
Write[outfile,p," ",r," ",s," ",m," ",outR[Re[dataOutput[[n-1+k]]]],"\t","# "<>name<>"("<>ToString[p]<>","<>ToString[r]<>","<>ToString[s]<>","<>ToString[m]<>")"];
];
If[ReIm==1&&IntersectingQ[{{p,r,s,m}},indices],
Write[outfile,p," ",r," ",s," ",m," ",outR[Im[dataOutput[[n-1+k]]]],"\t","# "<>name<>"("<>ToString[p]<>","<>ToString[r]<>","<>ToString[s]<>","<>ToString[m]<>")"];
];
,{k,1,Length[indices]}];
];


Write4F:=Block[{},

(* LL LL *)
WriteWC4F["WCLL","ll",201,4,0]; 
If[CPV==1,WriteWC4F["IMWCLL","ll",201,4,1];];
WriteWC4F["WCQQ1","qq1",228,4,0]; 
If[CPV==1,WriteWC4F["IMWCQQ1","qq1",228,4,1];];
WriteWC4F["WCQQ3","qq3",255,4,0]; 
If[CPV==1,WriteWC4F["IMWCQQ3","qq3",255,4,1];];
WriteWC4F["WCLQ1","lq1",282,5,0]; 
If[CPV==1,WriteWC4F["IMWCLQ1","lq1",282,5,1];];
WriteWC4F["WCLQ3","lq3",327,5,0]; 
If[CPV==1,WriteWC4F["IMWCLQ3","lq3",327,5,1];];

(* RR RR *)
WriteWC4F["WCEE","ee",372,6,0]; 
If[CPV==1,WriteWC4F["IMWCEE","ee",372,6,1];];
WriteWC4F["WCUU","uu",393,4,0]; 
If[CPV==1,WriteWC4F["IMWCUU","uu",393,4,1];];
WriteWC4F["WCDD","dd",420,4,0]; 
If[CPV==1,WriteWC4F["IMWCDD","dd",420,4,1];];
WriteWC4F["WCEU","eu",447,5,0]; 
If[CPV==1,WriteWC4F["IMWCEU","eu",447,5,1];];
WriteWC4F["WCED","ed",492,5,0]; 
If[CPV==1,WriteWC4F["IMWCED","ed",492,5,1];];
WriteWC4F["WCUD1","ud1",537,5,0]; 
If[CPV==1,WriteWC4F["IMWCUD1","ud1",537,5,1];];
WriteWC4F["WCUD8","ud8",582,5,0]; 
If[CPV==1,WriteWC4F["IMWCUD8","ud8",582,5,1];];

(* LL RR *)
WriteWC4F["WCLE","le",627,5,0]; 
If[CPV==1,WriteWC4F["IMWCLE","le",627,5,1];];
WriteWC4F["WCLU","lu",672,5,0]; 
If[CPV==1,WriteWC4F["IMWCLU","lu",672,5,1];];
WriteWC4F["WCLD","ld",717,5,0]; 
If[CPV==1,WriteWC4F["IMWCLD","ld",717,5,1];];
WriteWC4F["WCQE","qe",762,5,0]; 
If[CPV==1,WriteWC4F["IMWCQE","qe",762,5,1];];
WriteWC4F["WCQU1","qu1",807,5,0]; 
If[CPV==1,WriteWC4F["IMWCQU1","qu1",807,5,1];];
WriteWC4F["WCQU8","qu8",852,5,0]; 
If[CPV==1,WriteWC4F["IMWCQU8","qu8",852,5,1];];
WriteWC4F["WCQD1","qd1",897,5,0]; 
If[CPV==1,WriteWC4F["IMWCQD1","qd1",897,5,1];];
WriteWC4F["WCQD8","qd8",942,5,0]; 
If[CPV==1,WriteWC4F["IMWCQD8","qd8",942,5,1];];

(* LR RL *)
WriteWC4F["WCLEDQ","ledq",987,3,0]; 
If[CPV==1,WriteWC4F["IMWCLEDQ","ledq",987,3,1];];

(* LR LR *)
WriteWC4F["WCQUQD1","quqd1",1068,3,0]; 
If[CPV==1,WriteWC4F["IMWCQUQD1","quqd1",1068,3,1];];
WriteWC4F["WCQUQD8","quqd8",1149,3,0]; 
If[CPV==1,WriteWC4F["IMWCQUQD8","quqd8",1149,3,1];];
WriteWC4F["WCLEQU1","lequ1",1230,3,0]; 
If[CPV==1,WriteWC4F["IMWCLEQU1","lequ1",1230,3,1];];
WriteWC4F["WCLEQU3","lequ3",1311,3,0]; 
If[CPV==1,WriteWC4F["IMWCLEQU3","lequ3",1311,3,1];];

(* B-violating *)
WriteWC4F["WCDUQL","duql",1392,3,0]; 
If[CPV==1,WriteWC4F["IMWCDUQL","duql",1392,3,1];];
WriteWC4F["WCQQUE","qque",1473,7,0]; 
If[CPV==1,WriteWC4F["IMWCQQUE","qque",1473,7,1];];
WriteWC4F["WCQQQL","qqql",1527,8,0]; 
If[CPV==1,WriteWC4F["IMWCQQQL","qqql",1527,8,1];];
WriteWC4F["WCDUUE","duue",1584,3,0]; 
If[CPV==1,WriteWC4F["IMWCDUUE","duue",1584,3,1];];

];


Writedim5:=Block[{},

(* dim-5 *)
WriteWC2F["WCLLPHIPHI","llphiphi",1665,3,0]; 
If[CPV==1,WriteWC2F["IMWCLLPHIPHI","llphiphi",1665,3,1];];

];


WriteWCs:=Block[{},
Write0F;
Write2F;
Write4F;
Writedim5;
];


WriteWCsJSON:=Block[{},

Write[outfile,"{"];
Write[outfile,"  \"eft\": \"SMEFT\","];
Write[outfile,"  \"basis\": \"Warsaw\","];
Write[outfile,"  \"scale\": ",outR[LOWSCALE],","];
Write[outfile,"  \"values\": {"];
Do[
If[Element[dataOutput[[i+35]],Reals],
If[i<Length[WCsWCXF],
Write[outfile,"    \""<>ToString[WCsWCXF[[i]]]<>"\": ",outR[dataOutput[[i+35]]],","];
,
Write[outfile,"    \""<>ToString[WCsWCXF[[i]]]<>"\": ",outR[dataOutput[[i+35]]]];
];
,
Write[outfile,"    \""<>ToString[WCsWCXF[[i]]]<>"\": {"];
Write[outfile,"      \"Re\": ",outR[Re[dataOutput[[i+35]]]],","];
Write[outfile,"      \"Im\": ",outR[Im[dataOutput[[i+35]]]]];
If[i<Length[WCsWCXF],Write[outfile,"    },"];,Write[outfile,"    }"];];
];
,{i,1,Length[WCsWCXF]}];
Write[outfile,"  }"];
Write[outfile,"}"];

];


WriteWCsYAML:=Block[{},

Write[outfile,"eft: SMEFT"];
Write[outfile,"basis: Warsaw"];
Write[outfile,"scale: ",outR[LOWSCALE]];
Write[outfile,"values:"];
Do[
If[Element[dataOutput[[i+35]],Reals],
Write[outfile,"  "<>ToString[WCsWCXF[[i]]]<>": ",outR[dataOutput[[i+35]]]];
,
Write[outfile,"  "<>ToString[WCsWCXF[[i]]]<>":"];
Write[outfile,"    Re: ",outR[Re[dataOutput[[i+35]]]]];
Write[outfile,"    Im: ",outR[Im[dataOutput[[i+35]]]]];
];
,{i,1,Length[WCsWCXF]}];

];


WriteBS2:=Block[{},

Write[outfile,"Block BS2"];
Write[outfile,1," ",outR[Re[dataOutput[[1]]]],"\t","# C1sb"];
Write[outfile,2," ",outR[Re[dataOutput[[2]]]],"\t","# C2sb"];
Write[outfile,3," ",outR[Re[dataOutput[[3]]]],"\t","# C3sb"];
Write[outfile,4," ",outR[Re[dataOutput[[4]]]],"\t","# C4sb"];
Write[outfile,5," ",outR[Re[dataOutput[[5]]]],"\t","# C5sb"];
Write[outfile,6," ",outR[Re[dataOutput[[6]]]],"\t","# C1'sb"];
Write[outfile,7," ",outR[Re[dataOutput[[7]]]],"\t","# C2'sb"];
Write[outfile,8," ",outR[Re[dataOutput[[8]]]],"\t","# C3'sb"];

If[CPV==1,
Write[outfile,"Block IMBS2"];
Write[outfile,1," ",outR[Im[dataOutput[[1]]]],"\t","# C1sb"];
Write[outfile,2," ",outR[Im[dataOutput[[2]]]],"\t","# C2sb"];
Write[outfile,3," ",outR[Im[dataOutput[[3]]]],"\t","# C3sb"];
Write[outfile,4," ",outR[Im[dataOutput[[4]]]],"\t","# C4sb"];
Write[outfile,5," ",outR[Im[dataOutput[[5]]]],"\t","# C5sb"];
Write[outfile,6," ",outR[Im[dataOutput[[6]]]],"\t","# C1'sb"];
Write[outfile,7," ",outR[Im[dataOutput[[7]]]],"\t","# C2'sb"];
Write[outfile,8," ",outR[Im[dataOutput[[8]]]],"\t","# C3'sb"];
];
];


WriteBC1:=Block[{},

Write[outfile,"Block BC1"];
Write[outfile,1," ",outR[Re[dataOutput[[9]]]],"\t","# C1(e)"];
Write[outfile,2," ",outR[Re[dataOutput[[10]]]],"\t","# C5(e)"];
Write[outfile,3," ",outR[Re[dataOutput[[11]]]],"\t","# C1'(e)"];
Write[outfile,4," ",outR[Re[dataOutput[[12]]]],"\t","# C5'(e)"];
Write[outfile,5," ",outR[Re[dataOutput[[13]]]],"\t","# C7'(e)"];
Write[outfile,6," ",outR[Re[dataOutput[[14]]]],"\t","# C1(mu)"];
Write[outfile,7," ",outR[Re[dataOutput[[15]]]],"\t","# C5(mu)"];
Write[outfile,8," ",outR[Re[dataOutput[[16]]]],"\t","# C1'(mu)"];
Write[outfile,9," ",outR[Re[dataOutput[[17]]]],"\t","# C5'(mu)"];
Write[outfile,10," ",outR[Re[dataOutput[[18]]]],"\t","# C7'(mu)"];
Write[outfile,11," ",outR[Re[dataOutput[[19]]]],"\t","# C1(tau)"];
Write[outfile,12," ",outR[Re[dataOutput[[20]]]],"\t","# C5(tau)"];
Write[outfile,13," ",outR[Re[dataOutput[[21]]]],"\t","# C1'(tau)"];
Write[outfile,14," ",outR[Re[dataOutput[[22]]]],"\t","# C5'(tau)"];
Write[outfile,15," ",outR[Re[dataOutput[[23]]]],"\t","# C7'(tau)"];

If[CPV==1,
Write[outfile,"Block IMBC1"];
Write[outfile,1," ",outR[Im[dataOutput[[9]]]],"\t","# C1(e)"];
Write[outfile,2," ",outR[Im[dataOutput[[10]]]],"\t","# C5(e)"];
Write[outfile,3," ",outR[Im[dataOutput[[11]]]],"\t","# C1'(e)"];
Write[outfile,4," ",outR[Im[dataOutput[[12]]]],"\t","# C5'(e)"];
Write[outfile,5," ",outR[Im[dataOutput[[13]]]],"\t","# C7'(e)"];
Write[outfile,6," ",outR[Im[dataOutput[[14]]]],"\t","# C1(mu)"];
Write[outfile,7," ",outR[Im[dataOutput[[15]]]],"\t","# C5(mu)"];
Write[outfile,8," ",outR[Im[dataOutput[[16]]]],"\t","# C1'(mu)"];
Write[outfile,9," ",outR[Im[dataOutput[[17]]]],"\t","# C5'(mu)"];
Write[outfile,10," ",outR[Im[dataOutput[[18]]]],"\t","# C7'(mu)"];
Write[outfile,11," ",outR[Im[dataOutput[[19]]]],"\t","# C1(tau)"];
Write[outfile,12," ",outR[Im[dataOutput[[20]]]],"\t","# C5(tau)"];
Write[outfile,13," ",outR[Im[dataOutput[[21]]]],"\t","# C1'(tau)"];
Write[outfile,14," ",outR[Im[dataOutput[[22]]]],"\t","# C5'(tau)"];
Write[outfile,15," ",outR[Im[dataOutput[[23]]]],"\t","# C7'(tau)"];
];
];


WriteBS1H:=Block[{},

Write[outfile,"Block BS1H"];
Do[Write[outfile,i," ",outR[Re[dataOutput[[23+i]]]],"\t","# C"<>ToString[i]<>"(sbuu)"];,{i,1,10}];
Do[Write[outfile,10+i," ",outR[Re[dataOutput[[33+i]]]],"\t","# C"<>ToString[i]<>"(sbdd)"];,{i,1,10}];
Do[Write[outfile,20+i," ",outR[Re[dataOutput[[43+i]]]],"\t","# C"<>ToString[i]<>"(sbcc)"];,{i,1,10}];
Do[Write[outfile,30+i," ",outR[Re[dataOutput[[53+i]]]],"\t","# C"<>ToString[2i-1]<>"(sbss)"];,{i,1,5}];
Do[Write[outfile,35+i," ",outR[Re[dataOutput[[58+i]]]],"\t","# C"<>ToString[2i-1]<>"(sbbb)"];,{i,1,5}];
Do[Write[outfile,40+i," ",outR[Re[dataOutput[[80+i]]]],"\t","# C"<>ToString[i]<>"'(sbuu)"];,{i,1,10}];
Do[Write[outfile,50+i," ",outR[Re[dataOutput[[90+i]]]],"\t","# C"<>ToString[i]<>"'(sbdd)"];,{i,1,10}];
Do[Write[outfile,60+i," ",outR[Re[dataOutput[[100+i]]]],"\t","# C"<>ToString[i]<>"'(sbcc)"];,{i,1,10}];
Do[Write[outfile,70+i," ",outR[Re[dataOutput[[110+i]]]],"\t","# C"<>ToString[2i-1]<>"'(sbss)"];,{i,1,5}];
Do[Write[outfile,75+i," ",outR[Re[dataOutput[[115+i]]]],"\t","# C"<>ToString[2i-1]<>"'(sbbb)"];,{i,1,5}];

If[CPV==1,
Write[outfile,"Block IMBS1H"];
Do[Write[outfile,i," ",outR[Im[dataOutput[[23+i]]]],"\t","# C"<>ToString[i]<>"(sbuu)"];,{i,1,10}];
Do[Write[outfile,10+i," ",outR[Im[dataOutput[[33+i]]]],"\t","# C"<>ToString[i]<>"(sbdd)"];,{i,1,10}];
Do[Write[outfile,20+i," ",outR[Im[dataOutput[[43+i]]]],"\t","# C"<>ToString[i]<>"(sbcc)"];,{i,1,10}];
Do[Write[outfile,30+i," ",outR[Im[dataOutput[[53+i]]]],"\t","# C"<>ToString[2i-1]<>"(sbss)"];,{i,1,5}];
Do[Write[outfile,35+i," ",outR[Im[dataOutput[[58+i]]]],"\t","# C"<>ToString[2i-1]<>"(sbbb)"];,{i,1,5}];
Do[Write[outfile,40+i," ",outR[Im[dataOutput[[80+i]]]],"\t","# C"<>ToString[i]<>"'(sbuu)"];,{i,1,10}];
Do[Write[outfile,50+i," ",outR[Im[dataOutput[[90+i]]]],"\t","# C"<>ToString[i]<>"'(sbdd)"];,{i,1,10}];
Do[Write[outfile,60+i," ",outR[Im[dataOutput[[100+i]]]],"\t","# C"<>ToString[i]<>"'(sbcc)"];,{i,1,10}];
Do[Write[outfile,70+i," ",outR[Im[dataOutput[[110+i]]]],"\t","# C"<>ToString[2i-1]<>"'(sbss)"];,{i,1,5}];
Do[Write[outfile,75+i," ",outR[Im[dataOutput[[115+i]]]],"\t","# C"<>ToString[2i-1]<>"'(sbbb)"];,{i,1,5}];
];
];


WriteBS1GB:=Block[{},

Write[outfile,"Block BS1GB"];
Write[outfile,1," ",outR[Re[dataOutput[[64]]]],"\t","# C7gamma"];
Write[outfile,2," ",outR[Re[dataOutput[[65]]]],"\t","# C8gluon"];
Write[outfile,3," ",outR[Re[dataOutput[[121]]]],"\t","# C7gamma'"];
Write[outfile,4," ",outR[Re[dataOutput[[122]]]],"\t","# C7gluon'"];

If[CPV==1,
Write[outfile,"Block IMBS1GB"];
Write[outfile,1," ",outR[Im[dataOutput[[64]]]],"\t","# C7gamma"];
Write[outfile,2," ",outR[Im[dataOutput[[65]]]],"\t","# C8gluon"];
Write[outfile,3," ",outR[Im[dataOutput[[121]]]],"\t","# C7gamma'"];
Write[outfile,4," ",outR[Im[dataOutput[[122]]]],"\t","# C7gluon'"];
];
];


WriteBS1SL:=Block[{},

Write[outfile,"Block BS1SL"];
Do[Write[outfile,i," ",outR[Re[dataOutput[[65+i]]]],"\t","# C"<>ToString[2i-1]<>"(sbee)"];,{i,1,5}];
Do[Write[outfile,5+i," ",outR[Re[dataOutput[[70+i]]]],"\t","# C"<>ToString[2i-1]<>"(sbmumu)"];,{i,1,5}];
Do[Write[outfile,10+i," ",outR[Re[dataOutput[[75+i]]]],"\t","# C"<>ToString[2i-1]<>"(sbtautau)"];,{i,1,5}];
Do[Write[outfile,15+i," ",outR[Re[dataOutput[[122+i]]]],"\t","# C"<>ToString[2i-1]<>"'(sbee)"];,{i,1,5}];
Do[Write[outfile,20+i," ",outR[Re[dataOutput[[127+i]]]],"\t","# C"<>ToString[2i-1]<>"'(sbmumu)"];,{i,1,5}];
Do[Write[outfile,25+i," ",outR[Re[dataOutput[[132+i]]]],"\t","# C"<>ToString[2i-1]<>"'(sbtautau)"];,{i,1,5}];

If[CPV==1,
Write[outfile,"Block IMBS1SL"];
Do[Write[outfile,i," ",outR[Im[dataOutput[[65+i]]]],"\t","# C"<>ToString[2i-1]<>"(sbee)"];,{i,1,5}];
Do[Write[outfile,5+i," ",outR[Im[dataOutput[[70+i]]]],"\t","# C"<>ToString[2i-1]<>"(sbmumu)"];,{i,1,5}];
Do[Write[outfile,10+i," ",outR[Im[dataOutput[[75+i]]]],"\t","# C"<>ToString[2i-1]<>"(sbtautau)"];,{i,1,5}];
Do[Write[outfile,15+i," ",outR[Im[dataOutput[[122+i]]]],"\t","# C"<>ToString[2i-1]<>"'(sbee)"];,{i,1,5}];
Do[Write[outfile,20+i," ",outR[Im[dataOutput[[127+i]]]],"\t","# C"<>ToString[2i-1]<>"'(sbmumu)"];,{i,1,5}];
Do[Write[outfile,25+i," ",outR[Im[dataOutput[[132+i]]]],"\t","# C"<>ToString[2i-1]<>"'(sbtautau)"];,{i,1,5}];
];
];


WriteBS1:=Block[{},
WriteBS1H;
WriteBS1GB;
WriteBS1SL;
];


WriteWETWCs:=Block[{},
WriteBS2;
WriteBC1;
WriteBS1;
];


WriteOptions:=Block[{},
Write[outfile,"Block OPTIONS"];
Write[outfile,1," ",CPV,"\t","# CP Violation"];
Write[outfile,2," ",ReadRGEs,"\t","# Read RGEs"];
Write[outfile,3," ",RGEsMethod,"\t","# RGEs method"];
Write[outfile,4," ",ExportRGEs,"\t","# Export RGEs"];
Write[outfile,5," ",UseRGEsSM,"\t","# Use SM RGEs"];
Write[outfile,6," ",exportSMEFTrunner,"\t","#  Export SMEFTrunner results"];
Write[outfile,7," ",exportEWmatcher,"\t","# Export EWmatcher results"];
Write[outfile,8," ",exportWETrunner,"\t","# Export WETrunner results"];
Write[outfile,9," ",inputWCsType,"\t","# Type of input WCs"];
];


WriteOptionsFile[outname_]:=Block[{outfile},

(* Open file *)
outfile=OpenWrite[outname,FormatType->StandardForm];

(* Write output blocks *)
WriteScales;
WriteOptions;

(* Close file *)
Close[outfile];
];


WriteSMFile[outname_,dataOutput_]:=Block[{outfile},

(* Open file *)
outfile=OpenWrite[outname,FormatType->StandardForm];

(* Write output blocks *)
WriteSM;

(* Close file *)
Close[outfile];
];


WriteWCsFile[outname_,dataOutput_]:=Block[{outfile},

(* Open file *)
outfile=OpenWrite[outname,FormatType->StandardForm];

(* Write output blocks *)
WriteWCs;

(* Close file *)
Close[outfile];
];


WriteInputFiles[outnameOptions_,outnameWCs_,outnameSM_,data_]:=Block[{},

dataOutput=data;

(* Write input files *)
WriteOptionsFile[outnameOptions];
WriteSMFile[outnameSM,dataOutput];
WriteWCsFile[outnameWCs,dataOutput];

];


WriteInputFiles[outnameOptions_,outnameWCs_,data_]:=Block[{},

dataOutput=data;

(* Write input files *)
WriteOptionsFile[outnameOptions];
WriteEWmatcherOutputFile[outnameWCs,dataOutput];

];


WriteAndReadInputFiles[outnameOptions_,outnameWCs_,outnameSM_]:=Block[{},

dataOutput=Parameters;
Do[
If[!TrueQ[Head[Init[dataOutput[[i]]]]==Complex]&&!TrueQ[Head[Init[dataOutput[[i]]]]==Real]&&!TrueQ[Head[Init[dataOutput[[i]]]]==Integer],dataOutput[[i]]=0,dataOutput[[i]]=Init[dataOutput[[i]]]];
,{i,1,Length[dataOutput]}];

WriteInputFiles[outnameOptions,outnameWCs,outnameSM,dataOutput];
ReadInputFiles[outnameOptions,outnameWCs,outnameSM];

];


WriteAndReadInputFiles[outnameOptions_,outnameWCs_]:=Block[{},

dataOutput=WETParameters;
Do[
If[!TrueQ[Head[Init[dataOutput[[i]]]]==Complex]&&!TrueQ[Head[Init[dataOutput[[i]]]]==Real]&&!TrueQ[Head[Init[dataOutput[[i]]]]==Integer],dataOutput[[i]]=0,dataOutput[[i]]=Init[dataOutput[[i]]]];
,{i,1,Length[dataOutput]}];

WriteInputFiles[outnameOptions,outnameWCs,dataOutput];
ReadInputFiles[outnameOptions,outnameWCs];

];


WriteSMEFTrunnerOutputFile[outname_,dataOutput_]:=Block[{outfile},

(* Open file *)
outfile=OpenWrite[outname,FormatType->StandardForm];

(* Write output blocks *)
WriteScales;
WriteSM;
WriteWCs;
WriteOptions;

(* Close file *)
Close[outfile];
];


WriteWCsOutputFile[outname_,basis_,format_]:=Block[{outfile},

(* Open file *)
outfile=OpenWrite[outname,FormatType->StandardForm];

(* Data to export *)
If[basis=="MassBasis",dataOutput=WCsInMB;,
If[basis=="WCXF",dataOutput=WCsInWCXF;];];

(* Add 0F WCs *)
dataOutput[[36;;50]]=inputEWmatcher/@Parameters[[36;;50]];

If[format=="SLHA",
dataOutput=Chop[dataOutput,$MachineEpsilon];
(* Write the WCs output blocks *)
WriteWCs;
,
If[format=="JSON",
(* Include the 1/HIGHSCALE^2 (for dim-6 WCs) and 1/HIGHSCALE (for dim-5 WCs) factors *)
dataOutput=Join[Chop[dataOutput[[1;;1664]]/HIGHSCALE^2,$MachineEpsilon],Chop[dataOutput[[1665;;1670]]/HIGHSCALE,$MachineEpsilon]];
WriteWCsJSON;
,
If[format=="YAML",
(* Include the 1/HIGHSCALE^2 factor *)
dataOutput=Join[Chop[dataOutput[[1;;1664]]/HIGHSCALE^2,$MachineEpsilon],Chop[dataOutput[[1665;;1670]]/HIGHSCALE,$MachineEpsilon]];
WriteWCsYAML;
];
];
];

(* Close file *)
Close[outfile];
];


WriteEWmatcherOutputFile[outname_,dataOutput_]:=Block[{outfile},

(* Open file *)
outfile=OpenWrite[outname,FormatType->StandardForm];

(* Write output blocks *)
WriteScales;
WriteWETWCs;

(* Close file *)
Close[outfile];
];


WriteWETrunnerOutputFile[outname_,dataOutput_,lowscale_]:=Block[{outfile},

(* Open file *)
outfile=OpenWrite[outname,FormatType->StandardForm];

(* Write output blocks *)
WriteScalesLow[lowscale];
WriteWETWCs;

(* Close file *)
Close[outfile];
];


(* Printing function *)
MyPrint[string_]:=Block[{},
If[PrintMessages,Print[string]];
];


TurnOnMessages:=Block[{},
PrintMessages=True;
];


TurnOffMessages:=Block[{},
PrintMessages=False;
];
