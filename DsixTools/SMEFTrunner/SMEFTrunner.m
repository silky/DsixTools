(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



Print[StyleForm["SMEFTrunner","Section",FontSize->22,Bold]];
Print[StyleForm["DsixTools module for the RGE running of the Standard Model Effective Theory",FontSize->16]];
SMEFTrunnerDir=DsixToolsDir<>"SMEFTrunner/";
SMEFTrunner=True;
InitializeSMEFTrunnerInput;
BetaObtained=False;


(* Compute \[Beta] functions *)
GetBeta:=Block[{},

If[BetaObtained
,
MyPrint["SMEFT \[Beta] functions already computed"];
,
MyPrint["Computing SMEFT \[Beta] functions"];
Get[SMEFTrunnerDir<>"flavor.m"];
Get[SMEFTrunnerDir<>"beta.m"];
BetaObtained=True;
];

];


(* We construct the \[Beta] functions or read them from a file *)
LoadBetaFunctions:=Block[{},

If[ReadRGEs==0,
(* We reconstruct the RGEs *)
GetBeta;
MyPrint["Formatting SMEFT \[Beta] functions"];
Get[SMEFTrunnerDir<>"RGEsConstruct.m"];
,
(* We read the RGEs from a file *)
MyPrint["Loading SMEFT \[Beta] functions"];
If[CPV==0,
RGEs=Import[SMEFTrunnerDir<>"RGEs/CPC/RGEsSaved-"<>ToString[RGEsMethod]<>".m"];
RGEsSM=Import[SMEFTrunnerDir<>"RGEs/CPC/RGEsSMSaved-"<>ToString[RGEsMethod]<>".m"];
,
RGEs=Import[SMEFTrunnerDir<>"RGEs/CPV/RGEsSaved-"<>ToString[RGEsMethod]<>".m"];
RGEsSM=Import[SMEFTrunnerDir<>"RGEs/CPV/RGEsSMSaved-"<>ToString[RGEsMethod]<>".m"];
];
];

];


(* These are only necessary if the RGE solving method is NDSolve *)


RunRGEs[input_,start_,finish_]:=Block[{init},
init={};
For[i=1,i<=Length[Parameters],
init=Join[init,{Parameters[[i]][start]==(Parameters[[i]]/.input)}];
i++;];
equations=Join[RGEs,init];
sol=NDSolve[equations,Parameters,{t,start,finish},Method->{"EquationSimplification"->"Solve"}][[1]];
Return[sol];
];


RunRGEsSM[input_,start_,finish_]:=Block[{init},
init={};
For[i=1,i<=Length[SMParam],
init=Join[init,{SMParam[[i]][start]==(SMParam[[i]]/.input)}];
i++;];
equationsSM=Join[RGEsSM,init];
sol=NDSolve[equationsSM,SMParam,{t,start,finish},Method->{"EquationSimplification"->"Solve"}][[1]];
Return[sol];
];


(* We apply our algorithm for the resolution of the RGEs *)


RunRGEsSMEFT:=Block[{},

If[UseRGEsSM==1,
If[RGEsMethod==1,
runSM=RunRGEsSM[inputSMEFTrunnerSM,tLOW,tHIGH];
Do[
NewInput[SMParam[[k]],SMParam[[k]][tHIGH]/.runSM,inputSMEFTrunner];
,{k,1,Length[SMParam]}];
];
If[RGEsMethod==2,
\[Beta]ConstantSM=RGEsSM/.inputSMEFTrunnerSM;
cHIGHSM=SMParam/.inputSMEFTrunnerSM;
runSM=Table[SMParam[[i]]->Log[10]\[Beta]ConstantSM[[i]]/(16 Pi^2)(t-tLOW)+cHIGHSM[[i]],{i,1,Length[SMParam]}];
Do[
NewInput[SMParam[[k]],SMParam[[k]]/.runSM/.t->tHIGH,inputSMEFTrunner];
,{k,1,Length[SMParam]}];
];
];

MyPrint["Running"];
Get[SMEFTrunnerDir<>"RGEsRun.m"];
MyPrint["Running finished!"];

outSMEFTrunner=Var/.run;

];


(* We use the python-smeftrunner package for the resolution of the RGEs *)


RunRGEsSMEFTpython[optionsFile_,WCsFile_,SMFile_]:=Block[{},

SMEFTrunner=False;

(* We read the options file to get the values for HIGHSCALE and LOWSCALE *)
ReadInputFiles[optionsFile];

(* Mac users might need to import the terminal PATH to be able to run smeftrunner-cli *)
If[$OperatingSystem=="MacOSX",If[StringQ[newPATH],
SetEnvironment["PATH"->newPATH];
,
SetEnvironment["PATH"->Import["!source ~/.bash_profile; echo $PATH"<>":/usr/local/bin","Text"]];];
];

MyPrint["Running"];
Print[StyleForm["Using the python-smeftrunner package by Xuanyou Pan and David Straub",FontSize->16]];
Print[StyleForm["Website: https://github.com/DsixTools/python-smeftrunner",FontSize->16]];
Run["smeftrunner-cli "<>ToString[HIGHSCALE]<>" "<>ToString[LOWSCALE]<>" "<>SMFile<>" "<>WCsFile<>" --output Output_SMEFTrunner.dat"];
MyPrint["Running finished!"];

(* The results must be imported back to Mathematica *)
ReadInputFiles[optionsFile,"Output_SMEFTrunner.dat","Output_SMEFTrunner.dat"];
outSMEFTrunner=Parameters/.input;

];


ExportSMEFTrunner:=Block[{},

If[exportSMEFTrunner==1,
MyPrint["Exporting SMEFTrunner results"];
dataOutput=Chop[outSMEFTrunner/.t->tLOW,$MachineEpsilon];
outname="Output_SMEFTrunner.dat";
WriteSMEFTrunnerOutputFile[outname,dataOutput];
];

];
